name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          # Variáveis
          HOST=${{ secrets.EC2_HOST }}
          USER=${{ secrets.EC2_USER }}

          # Criar o diretório na máquina remota se não existir
          ssh -t -o StrictHostKeyChecking=no $USER@$HOST << "EOF"
            mkdir -p /home/$USER/app
          EOF

          # Upload arquivos para EC2
          scp -o StrictHostKeyChecking=no -r ./* $USER@$HOST:/home/$USER/app/

          # Conectar via SSH para construir e iniciar os containers Docker
          ssh -t -o StrictHostKeyChecking=no $USER@$HOST << "EOF"
            set -e

            start_container() {
              local dir=\$1
              local name=\$2
              local options=\$3

              cd /home/$USER/app/\$dir
              docker build -t \$name .
              docker run -d --name \$name \$options \$name

              # Aguardar o container iniciar
              while [ \$(docker inspect -f '{{.State.Running}}' \$name) != "true" ]; do
                sleep 1
              done
            }

            # Iniciar os containers em ordem
            start_container "zookeeper" "zookeeper" ""
            start_container "eureka" "eureka" "--link zookeeper:zookeeper"
            start_container "micro-producer" "micro-producer" "--link eureka:eureka"
            start_container "micro-consumer" "micro-consumer" "--link micro-producer:micro-producer"
            start_container "api-gateway" "api-gateway" "--link micro-consumer:micro-consumer"
          EOF

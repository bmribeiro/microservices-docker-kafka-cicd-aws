name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          # Variáveis
          HOST=${{ secrets.EC2_HOST }}
          USER=${{ secrets.EC2_USER }}

          # Criar o diretório na máquina remota se não existir
          ssh -t -o StrictHostKeyChecking=no $USER@$HOST << EOF
            echo "Criando diretório /home/$USER/app"
            mkdir -p /home/$USER/app
            echo "Diretório criado."
          EOF

          # Upload arquivos para EC2
          echo "Fazendo upload dos arquivos para EC2..."
          scp -o StrictHostKeyChecking=no -r ./* $USER@$HOST:/home/$USER/app/
          echo "Upload concluído."

          # Conectar via SSH para construir e iniciar os containers Docker
          ssh -t -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            set -e

            echo "Iniciando o script de containers Docker..."

            # Certificar-se de que o docker-compose.yml está no diretório correto
            echo "Verificando se o docker-compose.yml está presente..."
            if [ ! -f /home/$USER/app/zookeeper/docker-compose.yml ]; then
              echo "Arquivo docker-compose.yml não encontrado!"
              exit 1
            fi

            echo "Iniciando containers com docker-compose..."
            cd /home/$USER/app/zookeeper
            docker-compose up -d

            # Função para verificar se todos os containers fornecidos estão em execução
            check_containers_running() {
              local containers=("$@")
              local all_running=true

              for container in "${containers[@]}"; do
                status=$(docker inspect -f '{{.State.Running}}' "$container" 2>/dev/null)
                if [ "$status" != "true" ]; then
                  all_running=false
                  echo "Container $container ainda não está em execução. Aguardando..."
                fi
              done

              if [ "$all_running" = true ]; then
                echo "Todos os containers estão em execução."
              else
                echo "Alguns containers ainda não estão em execução."
              fi

              return $([ "$all_running" = true ] && echo 0 || echo 1)
            }

            # Aguardar os containers zookeeper e kafka iniciarem
            echo "Aguardando os containers zookeeper e kafka iniciarem..."
            until check_containers_running zookeeper kafka; do
              sleep 1
            done

            echo "Containers zookeeper e kafka estão em execução."

            # Construir e iniciar os containers restantes
            echo "Construindo e iniciando os containers restantes..."

            # Construir e iniciar o container eureka
            echo "Construindo e iniciando o container eureka..."
            cd /home/$USER/app/eureka
            docker build -t eureka .
            docker run -d --name eureka --link zookeeper:zookeeper eureka

            # Aguardar o container eureka iniciar
            echo "Aguardando o container eureka iniciar..."
            while [ "$(docker inspect -f '{{.State.Running}}' eureka)" != "true" ]; do
              echo "Container eureka ainda não está em execução. Aguardando..."
              sleep 1
            done
            echo "Container eureka está em execução."

            # Construir e iniciar o container micro-producer
            echo "Construindo e iniciando o container micro-producer..."
            cd /home/$USER/app/micro-producer
            docker build -t micro-producer .
            docker run -d --name micro-producer --link eureka:eureka micro-producer

            # Aguardar o container micro-producer iniciar
            echo "Aguardando o container micro-producer iniciar..."
            while [ "$(docker inspect -f '{{.State.Running}}' micro-producer)" != "true" ]; do
              echo "Container micro-producer ainda não está em execução. Aguardando..."
              sleep 1
            done
            echo "Container micro-producer está em execução."

            # Construir e iniciar o container micro-consumer
            echo "Construindo e iniciando o container micro-consumer..."
            cd /home/$USER/app/micro-consumer
            docker build -t micro-consumer .
            docker run -d --name micro-consumer --link micro-producer:micro-producer micro-consumer

            # Aguardar o container micro-consumer iniciar
            echo "Aguardando o container micro-consumer iniciar..."
            while [ "$(docker inspect -f '{{.State.Running}}' micro-consumer)" != "true" ]; do
              echo "Container micro-consumer ainda não está em execução. Aguardando..."
              sleep 1
            done
            echo "Container micro-consumer está em execução."

            # Construir e iniciar o container api-gateway
            echo "Construindo e iniciando o container api-gateway..."
            cd /home/$USER/app/api-gateway
            docker build -t api-gateway .
            docker run -d --name api-gateway --link micro-consumer:micro-consumer api-gateway

            # Aguardar o container api-gateway iniciar
            echo "Aguardando o container api-gateway iniciar..."
            while [ "$(docker inspect -f '{{.State.Running}}' api-gateway)" != "true" ]; do
              echo "Container api-gateway ainda não está em execução. Aguardando..."
              sleep 1
            done
            echo "Container api-gateway está em execução."

            echo "Todos os containers foram iniciados com sucesso."

            # Verificar status dos containers
            echo "Verificando status dos containers..."
            docker ps
            echo "Verificação concluída."
          EOF
